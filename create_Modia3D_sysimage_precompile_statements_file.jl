# The precompile statements are generated via: 
#     julia --trace-compile=stderr
precompile(Tuple{typeof(Modia3D.ModiatorServer)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, Function, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gh), String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(HTTP.Servers.listen), Function, String, Int64})
precompile(Tuple{typeof(HTTP.Servers.handle_connection), Function, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Int64, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Function, Int64})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Union{Base.SubString{String}, String}, Int64}}})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{Type{Sundials.CVODE_BDF{Method, LinearSolver, P, PS} where PS where P where LinearSolver where Method}})
precompile(Tuple{Type{Sundials.CVODE_BDF{:Newton, :Dense, Nothing, Nothing}}, Int64, Int64, Int64, Bool, Int64, Int64, Int64, Int64, Int64, Nothing, Nothing, Int64})
precompile(Tuple{typeof(Base.hasfield), Type, Symbol})
precompile(Tuple{typeof(Base.fieldindex), DataType, Symbol, Bool})
precompile(Tuple{Type{Sundials.CVODE_BDF{:Newton, :GMRES, Nothing, Nothing}}, Int64, Int64, Int64, Bool, Int64, Int64, Int64, Int64, Int64, Nothing, Nothing, Int64})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{typeof(Modia3D.simulateModel)}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type, String, String, Int64, Bool, Bool})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers.tryparse), Type{Float64}, Base.SubString{String}, Parsers.Options, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Modia3D.generateSimulationResult), Base.Dict{String, Any}})
